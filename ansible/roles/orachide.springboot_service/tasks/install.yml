---

- name: "Install | Ensure app root folder exist"
  file:
    path: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}"
    state: directory
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  become: true

- name: "Install | Ensure app version folder exist"
  file:
    path: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ sb_app_version }}"
    state: directory
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"

- name: "Install | Ensure PID_FOLDER exist (only for init.d)"
  file:
    path: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ item }}"
    state: directory
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
    mode: 0755
  when: not use_system_d
  with_items:
    - run
    - logs

- debug: var=sb_app_artifact_file verbosity=1

- debug: var=sb_local_maven_artifact_dowload verbosity=1

- name: "Install | Download maven artifact directly on remote host"
  maven_artifact:
    group_id: "{{ sb_app_group_id }}"
    artifact_id: "{{ sb_app_artifact_id }}"
    version: "{{ sb_app_version }}"
    classifier: "{{ sb_app_classifier | default(omit) }}"
    extension: "{{ sb_app_extension }}"
    repository_url: "{{ sb_maven_repository_url }}"
    validate_certs: "{{ sb_maven_repository_validate_certs | default('no') }}"
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
    username: "{{ sb_app_repository_username | default(omit) }}"
    password: "{{ sb_app_repository_password | default(omit) }}"
    dest: "{{ sb_app_artifact_destination_file }}"
    mode: 0500
  when: >
        sb_app_artifact_file is not defined and
        not sb_local_maven_artifact_dowload
  notify:
    - "Restart application"

- name: "Install | Download maven artifact on local host"
  maven_artifact:
    group_id: "{{ sb_app_group_id }}"
    artifact_id: "{{ sb_app_artifact_id }}"
    version: "{{ sb_app_version }}"
    classifier: "{{ sb_app_classifier | default(omit) }}"
    extension: "{{ sb_app_extension }}"
    repository_url: "{{ sb_maven_repository_url }}"
    username: "{{ sb_app_repository_username | default(omit) }}"
    password: "{{ sb_app_repository_password | default(omit) }}"
    dest: "/{{ sb_local_maven_artifact_download_temp_folder }}/{{ sb_app_artifact_id }}-{{ sb_app_version }}.{{ sb_app_extension }}"
    mode: 0500
  delegate_to: localhost
  when: >
        sb_app_artifact_file is not defined and
        sb_local_maven_artifact_dowload

- name: Install | Set sb_app_artifact_file
  set_fact:
    sb_app_artifact_file: "/{{ sb_local_maven_artifact_download_temp_folder }}/{{ sb_app_artifact_id }}-{{ sb_app_version }}.{{ sb_app_extension }}"
  when: >
        sb_app_artifact_file is not defined and
        sb_local_maven_artifact_dowload

- name: "Install | Copy application artifact file"
  copy:
    src: "{{ sb_app_artifact_file }}"
    dest: "{{ sb_app_artifact_destination_file }}"
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
    mode: 0500
  when: >
        sb_app_artifact_file is defined and
        sb_app_artifact_file|length > 0
  notify:
    - "Restart application"

- name: "Install | Ensure app artifact symlink exist"
  file:
    src: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ sb_app_version }}/{{ sb_app_artifact_id }}-{{ sb_app_version }}.{{ sb_app_extension }}"
    dest: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ sb_app_name | upper }}"
    state: link
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        use_system_d
  notify:
    - "Restart application"

- name: "Install | Source application service conf"
  template:
    src: app.conf.j2
    dest: "{{ sb_app_artifact_destination_folder }}/{{ sb_app_name }}-{{ sb_app_version }}.conf"
    mode: 0400
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  notify:
    - "Restart application"

- name: "Install | Ensure application service conf symlink exist"
  file:
    src: "{{ sb_app_artifact_destination_folder }}/{{ sb_app_name }}-{{ sb_app_version }}.conf"
    dest: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ sb_app_name }}.conf"
    state: link
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        use_system_d
  notify:
    - "Restart application"

- debug: var=sb_app_config_file_template_path verbosity=1

- name: "Install | Source application configuration file"
  template:
    src: "{{ sb_app_config_file_template_path }}"
    dest: "{{ sb_app_artifact_destination_folder }}/{{ sb_app_config_file_final_name }}"
    mode: 0644
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        sb_app_config_file_template_path is defined
  notify:
    - "Restart application"

- name: "Install | Ensure application configuration symlink exist"
  file:
    src: "{{ sb_app_artifact_destination_folder }}/{{ sb_app_config_file_final_name }}"
    dest: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/{{ sb_app_config_file_final_name }}"
    state: link
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        sb_app_config_file_template_path is defined and
        use_system_d
  notify:
    - "Restart application"

- name: "Install | Source application logback file"
  template:
    src: "{{ sb_app_logback_file_template_path }}"
    dest: "{{ sb_app_artifact_destination_folder }}/logback-spring.xml"
    mode: 0644
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        sb_app_logback_file_template_path is defined
  notify:
    - "Restart application"

- name: "Install | Ensure application logback symlink exist"
  file:
    src: "{{ sb_app_artifact_destination_folder }}/logback-spring.xml"
    dest: "{{ sb_applications_root_folder }}/{{ sb_app_name | upper }}/logback-spring.xml"
    state: link
    owner: "{{ sb_app_user }}"
    group: "{{ sb_app_user_group }}"
  when: >
        sb_app_logback_file_template_path is defined and
        use_system_d
  notify:
    - "Restart application"

- import_tasks: service.yml
  when: sb_app_as_a_service
